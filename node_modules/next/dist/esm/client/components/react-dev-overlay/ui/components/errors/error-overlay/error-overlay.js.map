{"version":3,"sources":["../../../../../../../../src/client/components/react-dev-overlay/ui/components/errors/error-overlay/error-overlay.tsx"],"sourcesContent":["import type { OverlayState } from '../../../../shared'\n\nimport { Suspense } from 'react'\nimport { BuildError } from '../../../container/build-error'\nimport { Errors } from '../../../container/errors'\nimport { RootLayoutMissingTagsError } from '../../../container/root-layout-missing-tags-error'\nimport { useDelayedRender } from '../../../hooks/use-delayed-render'\nimport type { ReadyRuntimeError } from '../../../../utils/get-error-by-type'\n\nconst transitionDurationMs = 200\n\nexport interface ErrorBaseProps {\n  rendered: boolean\n  transitionDurationMs: number\n  isTurbopack: boolean\n  versionInfo: OverlayState['versionInfo']\n}\n\nexport function ErrorOverlay({\n  state,\n  runtimeErrors,\n  isErrorOverlayOpen,\n  setIsErrorOverlayOpen,\n}: {\n  state: OverlayState\n  runtimeErrors: ReadyRuntimeError[]\n  isErrorOverlayOpen: boolean\n  setIsErrorOverlayOpen: (value: boolean) => void\n}) {\n  const isTurbopack = !!process.env.TURBOPACK\n\n  // This hook lets us do an exit animation before unmounting the component\n  const { mounted, rendered } = useDelayedRender(isErrorOverlayOpen, {\n    exitDelay: transitionDurationMs,\n  })\n\n  const commonProps = {\n    rendered,\n    transitionDurationMs,\n    isTurbopack,\n    versionInfo: state.versionInfo,\n  }\n\n  if (!!state.rootLayoutMissingTags?.length) {\n    return (\n      <RootLayoutMissingTagsError\n        {...commonProps}\n        // This is not a runtime error, forcedly display error overlay\n        rendered\n        missingTags={state.rootLayoutMissingTags}\n      />\n    )\n  }\n\n  if (state.buildError !== null) {\n    return (\n      <BuildError\n        {...commonProps}\n        message={state.buildError}\n        // This is not a runtime error, forcedly display error overlay\n        rendered\n      />\n    )\n  }\n\n  // No Runtime Errors.\n  if (!runtimeErrors.length) {\n    // Workaround React quirk that triggers \"Switch to client-side rendering\" if\n    // we return no Suspense boundary here.\n    return <Suspense />\n  }\n\n  if (!mounted) {\n    // Workaround React quirk that triggers \"Switch to client-side rendering\" if\n    // we return no Suspense boundary here.\n    return <Suspense />\n  }\n\n  return (\n    <Errors\n      {...commonProps}\n      debugInfo={state.debugInfo}\n      runtimeErrors={runtimeErrors}\n      onClose={() => {\n        setIsErrorOverlayOpen(false)\n      }}\n    />\n  )\n}\n"],"names":["Suspense","BuildError","Errors","RootLayoutMissingTagsError","useDelayedRender","transitionDurationMs","ErrorOverlay","state","runtimeErrors","isErrorOverlayOpen","setIsErrorOverlayOpen","isTurbopack","process","env","TURBOPACK","mounted","rendered","exitDelay","commonProps","versionInfo","rootLayoutMissingTags","length","missingTags","buildError","message","debugInfo","onClose"],"mappings":";AAEA,SAASA,QAAQ,QAAQ,QAAO;AAChC,SAASC,UAAU,QAAQ,iCAAgC;AAC3D,SAASC,MAAM,QAAQ,4BAA2B;AAClD,SAASC,0BAA0B,QAAQ,oDAAmD;AAC9F,SAASC,gBAAgB,QAAQ,oCAAmC;AAGpE,MAAMC,uBAAuB;AAS7B,OAAO,SAASC,aAAa,KAU5B;IAV4B,IAAA,EAC3BC,KAAK,EACLC,aAAa,EACbC,kBAAkB,EAClBC,qBAAqB,EAMtB,GAV4B;QAyBrBH;IAdN,MAAMI,cAAc,CAAC,CAACC,QAAQC,GAAG,CAACC,SAAS;IAE3C,yEAAyE;IACzE,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE,GAAGZ,iBAAiBK,oBAAoB;QACjEQ,WAAWZ;IACb;IAEA,MAAMa,cAAc;QAClBF;QACAX;QACAM;QACAQ,aAAaZ,MAAMY,WAAW;IAChC;IAEA,IAAI,CAAC,GAACZ,+BAAAA,MAAMa,qBAAqB,qBAA3Bb,6BAA6Bc,MAAM,GAAE;QACzC,qBACE,KAAClB;YACE,GAAGe,WAAW;YACf,8DAA8D;YAC9DF,QAAQ;YACRM,aAAaf,MAAMa,qBAAqB;;IAG9C;IAEA,IAAIb,MAAMgB,UAAU,KAAK,MAAM;QAC7B,qBACE,KAACtB;YACE,GAAGiB,WAAW;YACfM,SAASjB,MAAMgB,UAAU;YACzB,8DAA8D;YAC9DP,QAAQ;;IAGd;IAEA,qBAAqB;IACrB,IAAI,CAACR,cAAca,MAAM,EAAE;QACzB,4EAA4E;QAC5E,uCAAuC;QACvC,qBAAO,KAACrB;IACV;IAEA,IAAI,CAACe,SAAS;QACZ,4EAA4E;QAC5E,uCAAuC;QACvC,qBAAO,KAACf;IACV;IAEA,qBACE,KAACE;QACE,GAAGgB,WAAW;QACfO,WAAWlB,MAAMkB,SAAS;QAC1BjB,eAAeA;QACfkB,SAAS;YACPhB,sBAAsB;QACxB;;AAGN"}