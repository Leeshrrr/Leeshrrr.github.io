{"version":3,"sources":["../../../src/server/lib/router-server.ts"],"sourcesContent":["// this must come first as it includes require hooks\nimport type { WorkerRequestHandler, WorkerUpgradeHandler } from './types'\nimport type { DevBundler, ServerFields } from './router-utils/setup-dev-bundler'\nimport type { NextUrlWithParsedQuery, RequestMeta } from '../request-meta'\n\n// This is required before other imports to ensure the require hook is setup.\nimport '../node-environment'\nimport '../require-hook'\n\nimport url from 'url'\nimport path from 'path'\nimport loadConfig from '../config'\nimport { serveStatic } from '../serve-static'\nimport setupDebug from 'next/dist/compiled/debug'\nimport * as Log from '../../build/output/log'\nimport { DecodeError } from '../../shared/lib/utils'\nimport { findPagesDir } from '../../lib/find-pages-dir'\nimport { setupFsCheck } from './router-utils/filesystem'\nimport { proxyRequest } from './router-utils/proxy-request'\nimport { isAbortError, pipeToNodeResponse } from '../pipe-readable'\nimport { getResolveRoutes } from './router-utils/resolve-routes'\nimport { addRequestMeta, getRequestMeta } from '../request-meta'\nimport { pathHasPrefix } from '../../shared/lib/router/utils/path-has-prefix'\nimport { removePathPrefix } from '../../shared/lib/router/utils/remove-path-prefix'\nimport setupCompression from 'next/dist/compiled/compression'\nimport { NoFallbackError } from '../base-server'\nimport { signalFromNodeResponse } from '../web/spec-extension/adapters/next-request'\nimport { isPostpone } from './router-utils/is-postpone'\nimport { parseUrl as parseUrlUtil } from '../../shared/lib/router/utils/parse-url'\n\nimport {\n  PHASE_PRODUCTION_SERVER,\n  PHASE_DEVELOPMENT_SERVER,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../../shared/lib/constants'\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\nimport { DevBundlerService } from './dev-bundler-service'\nimport { type Span, trace } from '../../trace'\nimport { ensureLeadingSlash } from '../../shared/lib/page-path/ensure-leading-slash'\nimport { getNextPathnameInfo } from '../../shared/lib/router/utils/get-next-pathname-info'\nimport { getHostname } from '../../shared/lib/get-hostname'\nimport { detectDomainLocale } from '../../shared/lib/i18n/detect-domain-locale'\nimport { MockedResponse } from './mock-request'\nimport {\n  HMR_ACTIONS_SENT_TO_BROWSER,\n  type AppIsrManifestAction,\n} from '../dev/hot-reloader-types'\nimport { normalizedAssetPrefix } from '../../shared/lib/normalized-asset-prefix'\nimport { NEXT_PATCH_SYMBOL } from './patch-fetch'\nimport type { ServerInitResult } from './render-server'\nimport { filterInternalHeaders } from './server-ipc/utils'\nimport { blockCrossSite } from './router-utils/block-cross-site'\n\nconst debug = setupDebug('next:router-server:main')\nconst isNextFont = (pathname: string | null) =>\n  pathname && /\\/media\\/[^/]+\\.(woff|woff2|eot|ttf|otf)$/.test(pathname)\n\nexport type RenderServer = Pick<\n  typeof import('./render-server'),\n  | 'initialize'\n  | 'clearModuleContext'\n  | 'propagateServerField'\n  | 'getServerField'\n>\n\nexport interface LazyRenderServerInstance {\n  instance?: RenderServer\n}\n\nconst requestHandlers: Record<string, WorkerRequestHandler> = {}\n\nexport async function initialize(opts: {\n  dir: string\n  port: number\n  dev: boolean\n  onDevServerCleanup: ((listener: () => Promise<void>) => void) | undefined\n  server?: import('http').Server\n  minimalMode?: boolean\n  hostname?: string\n  keepAliveTimeout?: number\n  customServer?: boolean\n  experimentalHttpsServer?: boolean\n  startServerSpan?: Span\n  quiet?: boolean\n}): Promise<ServerInitResult> {\n  if (!process.env.NODE_ENV) {\n    // @ts-ignore not readonly\n    process.env.NODE_ENV = opts.dev ? 'development' : 'production'\n  }\n\n  const config = await loadConfig(\n    opts.dev ? PHASE_DEVELOPMENT_SERVER : PHASE_PRODUCTION_SERVER,\n    opts.dir,\n    { silent: false }\n  )\n\n  let compress: ReturnType<typeof setupCompression> | undefined\n\n  if (config?.compress !== false) {\n    compress = setupCompression()\n  }\n\n  const fsChecker = await setupFsCheck({\n    dev: opts.dev,\n    dir: opts.dir,\n    config,\n    minimalMode: opts.minimalMode,\n  })\n\n  const renderServer: LazyRenderServerInstance = {}\n\n  let developmentBundler: DevBundler | undefined\n\n  let devBundlerService: DevBundlerService | undefined\n\n  let originalFetch = globalThis.fetch\n\n  if (opts.dev) {\n    const { Telemetry } =\n      require('../../telemetry/storage') as typeof import('../../telemetry/storage')\n\n    const telemetry = new Telemetry({\n      distDir: path.join(opts.dir, config.distDir),\n    })\n    const { pagesDir, appDir } = findPagesDir(opts.dir)\n\n    const { setupDevBundler } =\n      require('./router-utils/setup-dev-bundler') as typeof import('./router-utils/setup-dev-bundler')\n\n    const resetFetch = () => {\n      globalThis.fetch = originalFetch\n      ;(globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] = false\n    }\n\n    const setupDevBundlerSpan = opts.startServerSpan\n      ? opts.startServerSpan.traceChild('setup-dev-bundler')\n      : trace('setup-dev-bundler')\n    developmentBundler = await setupDevBundlerSpan.traceAsyncFn(() =>\n      setupDevBundler({\n        // Passed here but the initialization of this object happens below, doing the initialization before the setupDev call breaks.\n        renderServer,\n        appDir,\n        pagesDir,\n        telemetry,\n        fsChecker,\n        dir: opts.dir,\n        nextConfig: config,\n        isCustomServer: opts.customServer,\n        turbo: !!process.env.TURBOPACK,\n        port: opts.port,\n        onDevServerCleanup: opts.onDevServerCleanup,\n        resetFetch,\n      })\n    )\n\n    devBundlerService = new DevBundlerService(\n      developmentBundler,\n      // The request handler is assigned below, this allows us to create a lazy\n      // reference to it.\n      (req, res) => {\n        return requestHandlers[opts.dir](req, res)\n      }\n    )\n  }\n\n  renderServer.instance =\n    require('./render-server') as typeof import('./render-server')\n\n  const randomBytes = new Uint8Array(8)\n  crypto.getRandomValues(randomBytes)\n  const middlewareSubrequestId = Buffer.from(randomBytes).toString('hex')\n  ;(globalThis as any)[Symbol.for('@next/middleware-subrequest-id')] =\n    middlewareSubrequestId\n\n  const allowedOrigins = [\n    '*.localhost',\n    'localhost',\n    ...(config.allowedDevOrigins || []),\n  ]\n  if (opts.hostname) {\n    allowedOrigins.push(opts.hostname)\n  }\n\n  const requestHandlerImpl: WorkerRequestHandler = async (req, res) => {\n    // internal headers should not be honored by the request handler\n    if (!process.env.NEXT_PRIVATE_TEST_HEADERS) {\n      filterInternalHeaders(req.headers)\n    }\n\n    if (\n      !opts.minimalMode &&\n      config.i18n &&\n      config.i18n.localeDetection !== false\n    ) {\n      const urlParts = (req.url || '').split('?', 1)\n      let urlNoQuery = urlParts[0] || ''\n\n      if (config.basePath) {\n        urlNoQuery = removePathPrefix(urlNoQuery, config.basePath)\n      }\n\n      const pathnameInfo = getNextPathnameInfo(urlNoQuery, {\n        nextConfig: config,\n      })\n\n      const domainLocale = detectDomainLocale(\n        config.i18n.domains,\n        getHostname({ hostname: urlNoQuery }, req.headers)\n      )\n\n      const defaultLocale =\n        domainLocale?.defaultLocale || config.i18n.defaultLocale\n\n      const { getLocaleRedirect } =\n        require('../../shared/lib/i18n/get-locale-redirect') as typeof import('../../shared/lib/i18n/get-locale-redirect')\n\n      const parsedUrl = parseUrlUtil((req.url || '')?.replace(/^\\/+/, '/'))\n\n      const redirect = getLocaleRedirect({\n        defaultLocale,\n        domainLocale,\n        headers: req.headers,\n        nextConfig: config,\n        pathLocale: pathnameInfo.locale,\n        urlParsed: {\n          ...parsedUrl,\n          pathname: pathnameInfo.locale\n            ? `/${pathnameInfo.locale}${urlNoQuery}`\n            : urlNoQuery,\n        },\n      })\n\n      if (redirect) {\n        res.setHeader('Location', redirect)\n        res.statusCode = RedirectStatusCode.TemporaryRedirect\n        res.end(redirect)\n        return\n      }\n    }\n\n    if (compress) {\n      // @ts-expect-error not express req/res\n      compress(req, res, () => {})\n    }\n    req.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n    res.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n\n    const invokedOutputs = new Set<string>()\n\n    async function invokeRender(\n      parsedUrl: NextUrlWithParsedQuery,\n      invokePath: string,\n      handleIndex: number,\n      additionalRequestMeta?: RequestMeta\n    ) {\n      // invokeRender expects /api routes to not be locale prefixed\n      // so normalize here before continuing\n      if (\n        config.i18n &&\n        removePathPrefix(invokePath, config.basePath).startsWith(\n          `/${getRequestMeta(req, 'locale')}/api`\n        )\n      ) {\n        invokePath = fsChecker.handleLocale(\n          removePathPrefix(invokePath, config.basePath)\n        ).pathname\n      }\n\n      if (\n        req.headers['x-nextjs-data'] &&\n        fsChecker.getMiddlewareMatchers()?.length &&\n        removePathPrefix(invokePath, config.basePath) === '/404'\n      ) {\n        res.setHeader('x-nextjs-matched-path', parsedUrl.pathname || '')\n        res.statusCode = 404\n        res.setHeader('content-type', 'application/json')\n        res.end('{}')\n        return null\n      }\n\n      if (!handlers) {\n        throw new Error('Failed to initialize render server')\n      }\n\n      addRequestMeta(req, 'invokePath', invokePath)\n      addRequestMeta(req, 'invokeQuery', parsedUrl.query)\n      addRequestMeta(req, 'middlewareInvoke', false)\n\n      for (const key in additionalRequestMeta || {}) {\n        addRequestMeta(\n          req,\n          key as keyof RequestMeta,\n          additionalRequestMeta![key as keyof RequestMeta]\n        )\n      }\n\n      debug('invokeRender', req.url, req.headers)\n\n      try {\n        const initResult =\n          await renderServer?.instance?.initialize(renderServerOpts)\n        try {\n          await initResult?.requestHandler(req, res)\n        } catch (err) {\n          if (err instanceof NoFallbackError) {\n            // eslint-disable-next-line\n            await handleRequest(handleIndex + 1)\n            return\n          }\n          throw err\n        }\n        return\n      } catch (e) {\n        // If the client aborts before we can receive a response object (when\n        // the headers are flushed), then we can early exit without further\n        // processing.\n        if (isAbortError(e)) {\n          return\n        }\n        throw e\n      }\n    }\n\n    const handleRequest = async (handleIndex: number) => {\n      if (handleIndex > 5) {\n        throw new Error(`Attempted to handle request too many times ${req.url}`)\n      }\n\n      // handle hot-reloader first\n      if (developmentBundler) {\n        if (blockCrossSite(req, res, allowedOrigins, `${opts.port}`)) {\n          return\n        }\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n        const parsedUrl = url.parse(req.url || '/')\n\n        const hotReloaderResult = await developmentBundler.hotReloader.run(\n          req,\n          res,\n          parsedUrl\n        )\n\n        if (hotReloaderResult.finished) {\n          return hotReloaderResult\n        }\n        req.url = origUrl\n      }\n\n      const {\n        finished,\n        parsedUrl,\n        statusCode,\n        resHeaders,\n        bodyStream,\n        matchedOutput,\n      } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: false,\n        signal: signalFromNodeResponse(res),\n        invokedOutputs,\n      })\n\n      if (res.closed || res.finished) {\n        return\n      }\n\n      if (developmentBundler && matchedOutput?.type === 'devVirtualFsItem') {\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n\n        if (resHeaders) {\n          for (const key of Object.keys(resHeaders)) {\n            res.setHeader(key, resHeaders[key])\n          }\n        }\n        const result = await developmentBundler.requestHandler(req, res)\n\n        if (result.finished) {\n          return\n        }\n        // TODO: throw invariant if we resolved to this but it wasn't handled?\n        req.url = origUrl\n      }\n\n      debug('requestHandler!', req.url, {\n        matchedOutput,\n        statusCode,\n        resHeaders,\n        bodyStream: !!bodyStream,\n        parsedUrl: {\n          pathname: parsedUrl.pathname,\n          query: parsedUrl.query,\n        },\n        finished,\n      })\n\n      // apply any response headers from routing\n      for (const key of Object.keys(resHeaders || {})) {\n        res.setHeader(key, resHeaders[key])\n      }\n\n      // handle redirect\n      if (!bodyStream && statusCode && statusCode > 300 && statusCode < 400) {\n        const destination = url.format(parsedUrl)\n        res.statusCode = statusCode\n        res.setHeader('location', destination)\n\n        if (statusCode === RedirectStatusCode.PermanentRedirect) {\n          res.setHeader('Refresh', `0;url=${destination}`)\n        }\n        return res.end(destination)\n      }\n\n      // handle middleware body response\n      if (bodyStream) {\n        res.statusCode = statusCode || 200\n        return await pipeToNodeResponse(bodyStream, res)\n      }\n\n      if (finished && parsedUrl.protocol) {\n        return await proxyRequest(\n          req,\n          res,\n          parsedUrl,\n          undefined,\n          getRequestMeta(req, 'clonableBody')?.cloneBodyStream(),\n          config.experimental.proxyTimeout\n        )\n      }\n\n      if (matchedOutput?.fsPath && matchedOutput.itemPath) {\n        if (\n          opts.dev &&\n          (fsChecker.appFiles.has(matchedOutput.itemPath) ||\n            fsChecker.pageFiles.has(matchedOutput.itemPath))\n        ) {\n          res.statusCode = 500\n          const message = `A conflicting public file and page file was found for path ${matchedOutput.itemPath} https://nextjs.org/docs/messages/conflicting-public-file-page`\n          await invokeRender(parsedUrl, '/_error', handleIndex, {\n            invokeStatus: 500,\n            invokeError: new Error(message),\n          })\n          Log.error(message)\n          return\n        }\n\n        if (\n          !res.getHeader('cache-control') &&\n          matchedOutput.type === 'nextStaticFolder'\n        ) {\n          if (opts.dev && !isNextFont(parsedUrl.pathname)) {\n            res.setHeader('Cache-Control', 'no-store, must-revalidate')\n          } else {\n            res.setHeader(\n              'Cache-Control',\n              'public, max-age=31536000, immutable'\n            )\n          }\n        }\n        if (!(req.method === 'GET' || req.method === 'HEAD')) {\n          res.setHeader('Allow', ['GET', 'HEAD'])\n          res.statusCode = 405\n          return await invokeRender(\n            url.parse('/405', true),\n            '/405',\n            handleIndex,\n            {\n              invokeStatus: 405,\n            }\n          )\n        }\n\n        try {\n          return await serveStatic(req, res, matchedOutput.itemPath, {\n            root: matchedOutput.itemsRoot,\n            // Ensures that etags are not generated for static files when disabled.\n            etag: config.generateEtags,\n          })\n        } catch (err: any) {\n          /**\n           * Hardcoded every possible error status code that could be thrown by \"serveStatic\" method\n           * This is done by searching \"this.error\" inside \"send\" module's source code:\n           * https://github.com/pillarjs/send/blob/master/index.js\n           * https://github.com/pillarjs/send/blob/develop/index.js\n           */\n          const POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC = new Set([\n            // send module will throw 500 when header is already sent or fs.stat error happens\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L392\n            // Note: we will use Next.js built-in 500 page to handle 500 errors\n            // 500,\n\n            // send module will throw 404 when file is missing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L421\n            // Note: we will use Next.js built-in 404 page to handle 404 errors\n            // 404,\n\n            // send module will throw 403 when redirecting to a directory without enabling directory listing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L484\n            // Note: Next.js throws a different error (without status code) for directory listing\n            // 403,\n\n            // send module will throw 400 when fails to normalize the path\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L520\n            400,\n\n            // send module will throw 412 with conditional GET request\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L632\n            412,\n\n            // send module will throw 416 when range is not satisfiable\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L669\n            416,\n          ])\n\n          let validErrorStatus = POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC.has(\n            err.statusCode\n          )\n\n          // normalize non-allowed status codes\n          if (!validErrorStatus) {\n            ;(err as any).statusCode = 400\n          }\n\n          if (typeof err.statusCode === 'number') {\n            const invokePath = `/${err.statusCode}`\n            const invokeStatus = err.statusCode\n            res.statusCode = err.statusCode\n            return await invokeRender(\n              url.parse(invokePath, true),\n              invokePath,\n              handleIndex,\n              {\n                invokeStatus,\n              }\n            )\n          }\n          throw err\n        }\n      }\n\n      if (matchedOutput) {\n        invokedOutputs.add(matchedOutput.itemPath)\n\n        return await invokeRender(\n          parsedUrl,\n          parsedUrl.pathname || '/',\n          handleIndex,\n          {\n            invokeOutput: matchedOutput.itemPath,\n          }\n        )\n      }\n\n      // 404 case\n      res.setHeader(\n        'Cache-Control',\n        'private, no-cache, no-store, max-age=0, must-revalidate'\n      )\n\n      // Short-circuit favicon.ico serving so that the 404 page doesn't get built as favicon is requested by the browser when loading any route.\n      if (opts.dev && !matchedOutput && parsedUrl.pathname === '/favicon.ico') {\n        res.statusCode = 404\n        res.end('')\n        return null\n      }\n\n      const appNotFound = opts.dev\n        ? developmentBundler?.serverFields.hasAppNotFound\n        : await fsChecker.getItem(UNDERSCORE_NOT_FOUND_ROUTE)\n\n      res.statusCode = 404\n\n      if (appNotFound) {\n        return await invokeRender(\n          parsedUrl,\n          UNDERSCORE_NOT_FOUND_ROUTE,\n          handleIndex,\n          {\n            invokeStatus: 404,\n          }\n        )\n      }\n\n      await invokeRender(parsedUrl, '/404', handleIndex, {\n        invokeStatus: 404,\n      })\n    }\n\n    try {\n      await handleRequest(0)\n    } catch (err) {\n      try {\n        let invokePath = '/500'\n        let invokeStatus = '500'\n\n        if (err instanceof DecodeError) {\n          invokePath = '/400'\n          invokeStatus = '400'\n        } else {\n          console.error(err)\n        }\n        res.statusCode = Number(invokeStatus)\n        return await invokeRender(url.parse(invokePath, true), invokePath, 0, {\n          invokeStatus: res.statusCode,\n        })\n      } catch (err2) {\n        console.error(err2)\n      }\n      res.statusCode = 500\n      res.end('Internal Server Error')\n    }\n  }\n\n  let requestHandler: WorkerRequestHandler = requestHandlerImpl\n  if (config.experimental.testProxy) {\n    // Intercept fetch and other testmode apis.\n    const { wrapRequestHandlerWorker, interceptTestApis } =\n      require('next/dist/experimental/testmode/server') as typeof import('next/src/experimental/testmode/server')\n    requestHandler = wrapRequestHandlerWorker(requestHandler)\n    interceptTestApis()\n    // We treat the intercepted fetch as \"original\" fetch that should be reset to during HMR.\n    originalFetch = globalThis.fetch\n  }\n  requestHandlers[opts.dir] = requestHandler\n\n  const renderServerOpts: Parameters<RenderServer['initialize']>[0] = {\n    port: opts.port,\n    dir: opts.dir,\n    hostname: opts.hostname,\n    minimalMode: opts.minimalMode,\n    dev: !!opts.dev,\n    server: opts.server,\n    serverFields: {\n      ...(developmentBundler?.serverFields || {}),\n      setIsrStatus: devBundlerService?.setIsrStatus.bind(devBundlerService),\n    } satisfies ServerFields,\n    experimentalTestProxy: !!config.experimental.testProxy,\n    experimentalHttpsServer: !!opts.experimentalHttpsServer,\n    bundlerService: devBundlerService,\n    startServerSpan: opts.startServerSpan,\n    quiet: opts.quiet,\n    onDevServerCleanup: opts.onDevServerCleanup,\n  }\n  renderServerOpts.serverFields.routerServerHandler = requestHandlerImpl\n\n  // pre-initialize workers\n  const handlers = await renderServer.instance.initialize(renderServerOpts)\n\n  const logError = async (\n    type: 'uncaughtException' | 'unhandledRejection',\n    err: Error | undefined\n  ) => {\n    if (isPostpone(err)) {\n      // React postpones that are unhandled might end up logged here but they're\n      // not really errors. They're just part of rendering.\n      return\n    }\n    if (type === 'unhandledRejection') {\n      Log.error('unhandledRejection: ', err)\n    } else if (type === 'uncaughtException') {\n      Log.error('uncaughtException: ', err)\n    }\n  }\n\n  process.on('uncaughtException', logError.bind(null, 'uncaughtException'))\n  process.on('unhandledRejection', logError.bind(null, 'unhandledRejection'))\n\n  const resolveRoutes = getResolveRoutes(\n    fsChecker,\n    config,\n    opts,\n    renderServer.instance,\n    renderServerOpts,\n    developmentBundler?.ensureMiddleware\n  )\n\n  const upgradeHandler: WorkerUpgradeHandler = async (req, socket, head) => {\n    try {\n      req.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n      socket.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n\n      if (opts.dev && developmentBundler && req.url) {\n        if (blockCrossSite(req, socket, allowedOrigins, `${opts.port}`)) {\n          return\n        }\n        const { basePath, assetPrefix } = config\n\n        let hmrPrefix = basePath\n\n        // assetPrefix overrides basePath for HMR path\n        if (assetPrefix) {\n          hmrPrefix = normalizedAssetPrefix(assetPrefix)\n\n          if (URL.canParse(hmrPrefix)) {\n            // remove trailing slash from pathname\n            // return empty string if pathname is '/'\n            // to avoid conflicts with '/_next' below\n            hmrPrefix = new URL(hmrPrefix).pathname.replace(/\\/$/, '')\n          }\n        }\n\n        const isHMRRequest = req.url.startsWith(\n          ensureLeadingSlash(`${hmrPrefix}/_next/webpack-hmr`)\n        )\n\n        // only handle HMR requests if the basePath in the request\n        // matches the basePath for the handler responding to the request\n        if (isHMRRequest) {\n          return developmentBundler.hotReloader.onHMR(\n            req,\n            socket,\n            head,\n            (client) => {\n              client.send(\n                JSON.stringify({\n                  action: HMR_ACTIONS_SENT_TO_BROWSER.ISR_MANIFEST,\n                  data: devBundlerService?.appIsrManifest || {},\n                } satisfies AppIsrManifestAction)\n              )\n            }\n          )\n        }\n      }\n\n      const res = new MockedResponse({\n        resWriter: () => {\n          throw new Error(\n            'Invariant: did not expect response writer to be written to for upgrade request'\n          )\n        },\n      })\n      const { matchedOutput, parsedUrl } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: true,\n        signal: signalFromNodeResponse(socket),\n      })\n\n      // TODO: allow upgrade requests to pages/app paths?\n      // this was not previously supported\n      if (matchedOutput) {\n        return socket.end()\n      }\n\n      if (parsedUrl.protocol) {\n        return await proxyRequest(req, socket, parsedUrl, head)\n      }\n\n      // If there's no matched output, we don't handle the request as user's\n      // custom WS server may be listening on the same path.\n    } catch (err) {\n      console.error('Error handling upgrade request', err)\n      socket.end()\n    }\n  }\n\n  return {\n    requestHandler,\n    upgradeHandler,\n    server: handlers.server,\n    closeUpgraded() {\n      developmentBundler?.hotReloader?.close()\n    },\n  }\n}\n"],"names":["initialize","debug","setupDebug","isNextFont","pathname","test","requestHandlers","opts","process","env","NODE_ENV","dev","config","loadConfig","PHASE_DEVELOPMENT_SERVER","PHASE_PRODUCTION_SERVER","dir","silent","compress","setupCompression","fsChecker","setupFsCheck","minimalMode","renderServer","developmentBundler","devBundlerService","originalFetch","globalThis","fetch","Telemetry","require","telemetry","distDir","path","join","pagesDir","appDir","findPagesDir","setupDevBundler","resetFetch","NEXT_PATCH_SYMBOL","setupDevBundlerSpan","startServerSpan","traceChild","trace","traceAsyncFn","nextConfig","isCustomServer","customServer","turbo","TURBOPACK","port","onDevServerCleanup","DevBundlerService","req","res","instance","randomBytes","Uint8Array","crypto","getRandomValues","middlewareSubrequestId","Buffer","from","toString","Symbol","for","allowedOrigins","allowedDevOrigins","hostname","push","requestHandlerImpl","NEXT_PRIVATE_TEST_HEADERS","filterInternalHeaders","headers","i18n","localeDetection","urlParts","url","split","urlNoQuery","basePath","removePathPrefix","pathnameInfo","getNextPathnameInfo","domainLocale","detectDomainLocale","domains","getHostname","defaultLocale","getLocaleRedirect","parsedUrl","parseUrlUtil","replace","redirect","pathLocale","locale","urlParsed","setHeader","statusCode","RedirectStatusCode","TemporaryRedirect","end","on","_err","invokedOutputs","Set","invokeRender","invokePath","handleIndex","additionalRequestMeta","startsWith","getRequestMeta","handleLocale","getMiddlewareMatchers","length","handlers","Error","addRequestMeta","query","key","initResult","renderServerOpts","requestHandler","err","NoFallbackError","handleRequest","e","isAbortError","blockCrossSite","origUrl","pathHasPrefix","parse","hotReloaderResult","hotReloader","run","finished","resHeaders","bodyStream","matchedOutput","resolveRoutes","isUpgradeReq","signal","signalFromNodeResponse","closed","type","Object","keys","result","destination","format","PermanentRedirect","pipeToNodeResponse","protocol","proxyRequest","undefined","cloneBodyStream","experimental","proxyTimeout","fsPath","itemPath","appFiles","has","pageFiles","message","invokeStatus","invokeError","Log","error","getHeader","method","serveStatic","root","itemsRoot","etag","generateEtags","POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC","validErrorStatus","add","invokeOutput","appNotFound","serverFields","hasAppNotFound","getItem","UNDERSCORE_NOT_FOUND_ROUTE","DecodeError","console","Number","err2","testProxy","wrapRequestHandlerWorker","interceptTestApis","server","setIsrStatus","bind","experimentalTestProxy","experimentalHttpsServer","bundlerService","quiet","routerServerHandler","logError","isPostpone","getResolveRoutes","ensureMiddleware","upgradeHandler","socket","head","assetPrefix","hmrPrefix","normalizedAssetPrefix","URL","canParse","isHMRRequest","ensureLeadingSlash","onHMR","client","send","JSON","stringify","action","HMR_ACTIONS_SENT_TO_BROWSER","ISR_MANIFEST","data","appIsrManifest","MockedResponse","resWriter","closeUpgraded","close"],"mappings":"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"}